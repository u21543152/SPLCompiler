package com.splcompiler.codegen;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.splcompiler.lexer.Token;
import com.splcompiler.parser.Node;
import com.splcompiler.parser.innerNode;
import com.splcompiler.parser.leafNode;
import com.splcompiler.parser.lexerXMLParser;
import com.splcompiler.parser.parser;
import com.splcompiler.parser.rootNode;

public class CodeGeneration
{
	 public static void main(String[] args) throws IOException 
	 {
	        
	        // Step 1: Read tokens from the XML file
	        String lexerOutputFile = "src/main/resources/output.xml";  // This is the XML file generated by the lexer
	        List<Token> tokens = lexerXMLParser.readTokensFromXML(lexerOutputFile);

	        // Step 2: Parse the tokens to create an AST
	        parser parser = new parser(tokens);
	        rootNode root = parser.parseProgram();
	        
	        // Step 3: Actually create the code
	        for (Node child : root.children)
	        {
	            processNodes(child);
	        }
	        
	 }
	 
	 
	 public static void processNodes(Node node) 
	 {
	     //recursively process children
		 System.out.println(node.Symbol);
		 for (Node child : node.children) 
	     {
			 processNodes(child);
	     }
	 }
	 
	 public static void processNode(Node node) // this function outputs 
	 {
		 
	 }
}
